{"/home/travis/build/npmtest/node-npmtest-exchanger/test.js":"/* istanbul instrument in package npmtest_exchanger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-exchanger/lib.npmtest_exchanger.js":"/* istanbul instrument in package npmtest_exchanger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_exchanger = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_exchanger = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-exchanger/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-exchanger && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_exchanger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_exchanger\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_exchanger.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_exchanger.rollup.js'] =\n            local.assetsDict['/assets.npmtest_exchanger.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_exchanger.__dirname + '/lib.npmtest_exchanger.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-exchanger/node_modules/exchanger/index.js":"var path = require('path')\n  , moment = require('moment')\n  , crypto = require('crypto')\n  , xml2js = require('xml2js')\n  ;\n\n\nexports.client = null;\n\n\nexports.initialize = function(settings, callback) {\n  var soap = require('soap');\n  // TODO: Handle different locations of where the asmx lives.\n  var endpoint = 'https://' + path.join(settings.url, 'EWS/Exchange.asmx');\n  var url = path.join(__dirname, 'Services.wsdl');\n\n  soap.createClient(url, {}, function(err, client) {\n    if (err) {\n      return callback(err);\n    }\n    if (!client) {\n      return callback(new Error('Could not create client'));\n    }\n\n    exports.client = client;\n    exports.client.setSecurity(new soap.BasicAuthSecurity(settings.username, settings.password));\n\n    return callback(null);\n  }, endpoint);\n}\n\n\nexports.getEmails = function(folderName, limit, callback) {\n  if (typeof(folderName) === \"function\") {\n    callback = folderName;\n    folderName = 'inbox';\n    limit = 10;\n  }\n  if (typeof(limit) === \"function\") {\n    callback = limit;\n    limit = 10;\n  }\n  if (!exports.client) {\n    return callback(new Error('Call initialize()'));\n  }\n\n  var soapRequest = \n    '<tns:FindItem Traversal=\"Shallow\" xmlns:tns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">' +\n      '<tns:ItemShape>' +\n        '<t:BaseShape>IdOnly</t:BaseShape>' +\n        '<t:AdditionalProperties>' +\n          '<t:FieldURI FieldURI=\"item:ItemId\"></t:FieldURI>' +\n          // '<t:FieldURI FieldURI=\"item:ConversationId\"></t:FieldURI>' +\n          // '<t:FieldURI FieldURI=\"message:ReplyTo\"></t:FieldURI>' +\n          // '<t:FieldURI FieldURI=\"message:ToRecipients\"></t:FieldURI>' +\n          // '<t:FieldURI FieldURI=\"message:CcRecipients\"></t:FieldURI>' +\n          // '<t:FieldURI FieldURI=\"message:BccRecipients\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:DateTimeCreated\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:DateTimeSent\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:HasAttachments\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:Size\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"message:From\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"message:IsRead\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:Importance\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:Subject\"></t:FieldURI>' +\n          '<t:FieldURI FieldURI=\"item:DateTimeReceived\"></t:FieldURI>' +\n        '</t:AdditionalProperties>' + \n      '</tns:ItemShape>' +\n      '<tns:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"10\"></tns:IndexedPageItemView>' +\n      '<tns:ParentFolderIds>' + \n        '<t:DistinguishedFolderId Id=\"inbox\"></t:DistinguishedFolderId>' + \n      '</tns:ParentFolderIds>' + \n    '</tns:FindItem>';\n\n  exports.client.FindItem(soapRequest, function(err, result, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    var parser = new xml2js.Parser();\n\n    parser.parseString(body, function(err, result) {\n      var responseCode = result['s:Body']['m:FindItemResponse']['m:ResponseMessages']['m:FindItemResponseMessage']['m:ResponseCode'];\n\n      if (responseCode !== 'NoError') {\n        return callback(new Error(responseCode));\n      }\n        \n      var rootFolder = result['s:Body']['m:FindItemResponse']['m:ResponseMessages']['m:FindItemResponseMessage']['m:RootFolder'];\n      \n      var emails = [];\n      rootFolder['t:Items']['t:Message'].forEach(function(item, idx) {\n        var md5hasher = crypto.createHash('md5');\n        md5hasher.update(item['t:Subject'] + item['t:DateTimeSent']);\n        var hash = md5hasher.digest('hex');\n\n        var itemId = {\n          id: item['t:ItemId']['@'].Id,\n          changeKey: item['t:ItemId']['@'].ChangeKey\n        };\n\n        var dateTimeReceived = item['t:DateTimeReceived'];\n\n        emails.push({\n          id: itemId.id + '|' + itemId.changeKey,\n          hash: hash,\n          subject: item['t:Subject'],\n          dateTimeReceived: moment(dateTimeReceived).format(\"MM/DD/YYYY, h:mm:ss A\"),\n          size: item['t:Size'],\n          importance: item['t:Importance'],\n          hasAttachments: (item['t:HasAttachments'] === 'true'),\n          from: item['t:From']['t:Mailbox']['t:Name'],\n          isRead: (item['t:IsRead'] === 'true'),\n          meta: {\n            itemId: itemId\n          }\n        });\n      });\n\n      callback(null, emails);\n    });\n  });\n}\n\n\nexports.getEmail = function(itemId, callback) {\n  if (!exports.client) {\n    return callback(new Error('Call initialize()'))\n  }\n  if ((!itemId['id'] || !itemId['changeKey']) && itemId.indexOf('|') > 0) {\n    var s = itemId.split('|');\n\n    itemId = {\n      id: itemId.split('|')[0],\n      changeKey: itemId.split('|')[1]\n    };\n  }\n\n  if (!itemId.id || !itemId.changeKey) {\n    return callback(new Error('Id is not correct.'));\n  }\n\n  var soapRequest = \n    '<tns:GetItem xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">' +\n      '<tns:ItemShape>' +\n        '<t:BaseShape>Default</t:BaseShape>' +\n        '<t:IncludeMimeContent>true</t:IncludeMimeContent>' +\n      '</tns:ItemShape>' +\n      '<tns:ItemIds>' +\n        '<t:ItemId Id=\"' + itemId.id + '\" ChangeKey=\"' + itemId.changeKey + '\" />' +\n      '</tns:ItemIds>' +\n    '</tns:GetItem>';\n\n  exports.client.GetItem(soapRequest, function(err, result, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    var parser = new xml2js.Parser();\n\n    parser.parseString(body, function(err, result) {\n      var responseCode = result['s:Body']['m:GetItemResponse']['m:ResponseMessages']['m:GetItemResponseMessage']['m:ResponseCode'];\n\n      if (responseCode !== 'NoError') {\n        return callback(new Error(responseCode));\n      }\n       \n      var item = result['s:Body']['m:GetItemResponse']['m:ResponseMessages']['m:GetItemResponseMessage']['m:Items']['t:Message'];\n\n      var itemId = {\n        id: item['t:ItemId']['@'].Id,\n        changeKey: item['t:ItemId']['@'].ChangeKey\n      };\n\n      function handleMailbox(mailbox) {\n        var mailboxes = [];\n\n        if (!mailbox || !mailbox['t:Mailbox']) {\n          return mailboxes;\n        }\n        mailbox = mailbox['t:Mailbox'];\n\n        function getMailboxObj(mailboxItem) {\n          return {\n            name: mailboxItem['t:Name'],\n            emailAddress: mailboxItem['t:EmailAddress']\n          };\n        }\n\n        if (mailbox instanceof Array) {\n          mailbox.forEach(function(m, idx) {\n            mailboxes.push(getMailboxObj(m));\n          })\n        } else {\n          mailboxes.push(getMailboxObj(mailbox));\n        }\n\n        return mailboxes;\n      }\n\n      var toRecipients = handleMailbox(item['t:ToRecipients']);\n      var ccRecipients = handleMailbox(item['t:CcRecipients']);\n      var from = handleMailbox(item['t:From']);\n\n      var email = {\n        id: itemId.id + '|' + itemId.changeKey,\n        subject: item['t:Subject'],\n        bodyType: item['t:Body']['@']['t:BodyType'],\n        body: item['t:Body']['#'],\n        size: item['t:Size'],\n        dateTimeSent: item['t:DateTimeSent'],\n        dateTimeCreated: item['t:DateTimeCreated'],\n        toRecipients: toRecipients,\n        ccRecipients: ccRecipients,\n        from: from,\n        isRead: (item['t:IsRead'] == 'true') ? true : false,\n        meta: {\n          itemId: itemId\n        }\n      };\n\n      callback(null, email);\n    });\n  });\n}\n\n\nexports.getFolders = function(id, callback) {\n  if (typeof(id) == 'function') {\n    callback = id;\n    id = 'inbox';\n  }\n\n  var soapRequest = \n    '<tns:FindFolder xmlns:tns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">' +\n        '<tns:FolderShape>' +\n          '<t:BaseShape>Default</t:BaseShape>' +\n        '</tns:FolderShape>' +\n        '<tns:ParentFolderIds>' + \n          '<t:DistinguishedFolderId Id=\"inbox\"></t:DistinguishedFolderId>' + \n        '</tns:ParentFolderIds>' + \n      '</tns:FindFolder>';\n\n  exports.client.FindFolder(soapRequest, function(err, result) {\n    if (err) {\n      callback(err)\n    }\n    \n    if (result.ResponseMessages.FindFolderResponseMessage.ResponseCode == 'NoError') {\n      var rootFolder = result.ResponseMessages.FindFolderResponseMessage.RootFolder;\n      \n      rootFolder.Folders.Folder.forEach(function(folder) {\n        // console.log(folder);\n      });\n\n      callback(null, {});\n    }\n  });\n}"}